#include "world.csp";

var cost = 0; 
var cost_limit = 20;

var up = -1;
var down = 1;
var left = -1;
var right = 1;

Submarine() = [
		  (xpos+up) >= 0 && (xpos+up) <= 7 && onBoard != maxCapacity &&
		  (world[xpos+up][ypos] == 0 || world[xpos+up][ypos] == 3)
		] moveUp -> DoMoveUp()
		[] [
		  (xpos+down) >= 0 && (xpos+down) <= 7 && onBoard != maxCapacity &&
		  (world[xpos+down][ypos] == 0 || world[xpos+down][ypos] == 3)
		] moveDown -> DoMoveDown()
		[] [
		  (ypos+right) >= 0 && (ypos+right) <= 7 && onBoard != maxCapacity &&
		  (world[xpos][ypos+right] == 0 || world[xpos][ypos+right] == 3)
		] moveRight -> DoMoveRight()
		[] [
		  (ypos+left) >= 0 && (ypos+left) <= 7 && onBoard != maxCapacity &&
		  (world[xpos][ypos+left] == 0 || world[xpos][ypos+left] == 3)
		] moveLeft -> DoMoveLeft()
		[] [onBoard == maxCapacity] goHome -> DoGoHome();
		
		
DoGoHome() = [
		  (xpos+up) >= 0 && (xpos+up) <= 7 && (world[xpos+up][ypos] == Visited)
		] moveUp -> DoMoveUp()
		[] [
		  (xpos+down) >= 0 && (xpos+down) <= 7 && (world[xpos+down][ypos] == Visited)
		] moveDown -> DoMoveDown()
		[] [
		  (ypos+right) >= 0 && (ypos+right) <= 7 && (world[xpos][ypos+right] == Visited)
		] moveRight -> DoMoveRight()
		[] [
		  (ypos+left) >= 0 && (ypos+left) <= 7 && (world[xpos][ypos+left] == Visited)
		] moveLeft -> DoMoveLeft();

DoMoveUp() = [cost < cost_limit]
	    { cost = cost + 1;
	    if (
	    	(xpos>0 && world[xpos+up][ypos] == Hostile) ||
	    	(xpos<7 && world[xpos+down][ypos] == Hostile) ||
	    	(ypos>0 && world[xpos][ypos+left] == Hostile) ||
	    	(ypos<7 && world[xpos][ypos+right] == Hostile)
	    	) {
	    	cost = cost + 4;
	    }
	      world[xpos][ypos] = Visited;
	      xpos = xpos + up
	    } -> CheckForSurvivor();

DoMoveDown() = [cost < cost_limit]
	    { cost = cost + 1;
	    if (
	    	(xpos>0 && world[xpos+up][ypos] == Hostile) ||
	    	(xpos<7 && world[xpos+down][ypos] == Hostile) ||
	    	(ypos>0 && world[xpos][ypos+left] == Hostile) ||
	    	(ypos<7 && world[xpos][ypos+right] == Hostile)
	    	) {
	    	cost = cost + 4;
	    }
	      world[xpos][ypos] = Visited;
	      xpos = xpos + down
	    } -> CheckForSurvivor();

DoMoveRight() = [cost < cost_limit]
	    { cost = cost + 1;
	    if (
	    	(xpos>0 && world[xpos+up][ypos] == Hostile) ||
	    	(xpos<7 && world[xpos+down][ypos] == Hostile) ||
	    	(ypos>0 && world[xpos][ypos+left] == Hostile) ||
	    	(ypos<7 && world[xpos][ypos+right] == Hostile)
	    	) {
	    	cost = cost + 4;
	    }
	      world[xpos][ypos] = Visited;
	      ypos = ypos + right
	    } -> CheckForSurvivor();

DoMoveLeft() = [cost < cost_limit]
	    { cost = cost + 1;
	    if (
	    	(xpos>0 && world[xpos+up][ypos] == Hostile) ||
	    	(xpos<7 && world[xpos+down][ypos] == Hostile) ||
	    	(ypos>0 && world[xpos][ypos+left] == Hostile) ||
	    	(ypos<7 && world[xpos][ypos+right] == Hostile)
	    	) {
	    	cost = cost + 4;
	    }
	      world[xpos][ypos] = Visited;
	      ypos = ypos + left
	    } -> CheckForSurvivor();
    
CheckForSurvivor() = [world[xpos][ypos] == Survivor && onBoard < maxCapacity] found {onBoard = onBoard + 1; world[xpos][ypos] = Visited} -> Submarine()
		[] [world[xpos][ypos] != Survivor || onBoard >= maxCapacity] notFound -> Submarine();

#define goal (onBoard == maxCapacity && xpos == SUB_HOME_X && ypos == SUB_HOME_Y);
#assert CheckForSurvivor() reaches goal with min(cost);