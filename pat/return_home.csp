#include "world.csp";

var cost = 0; 
var max_cost = 40;
var left_or_right = 0;
var up_or_down = 0;

var up = -1;
var down = 1;
var left = -1;
var right = 1;

GetY() = 
    [SUB_HOME_X - xpos > 0] {up_or_down = 1} -> GetX()
    [] [SUB_HOME_X - xpos < 0] {up_or_down = -1} -> GetX()
    [] {up_or_down = 0} -> GetX();

GetX() = 
    [SUB_HOME_Y - ypos > 0] {left_or_right = 1} -> DoGoHome()
    [] [SUB_HOME_Y - ypos < 0] {left_or_right = -1} -> DoGoHome()
    [] {left_or_right = 0} -> DoGoHome();

			
DoGoHome() = 
		[up_or_down == -1 && xpos > 0 && (world[xpos+up][ypos] == Visited || world[xpos+up][ypos] == Unvisited)] moveUp -> DoMoveUp()
		[] [up_or_down == 1 && xpos < 7 && (world[xpos+down][ypos] == Visited || world[xpos+down][ypos] == Unvisited)] moveDown -> DoMoveDown()
		[] [left_or_right == -1 && ypos > 0 && (world[xpos][ypos+left] == Visited || world[xpos][ypos+left] == Unvisited)] moveLeft -> DoMoveLeft()
		[] [left_or_right == 1 && ypos < 7 && (world[xpos][ypos+right] == Visited || world[xpos][ypos+right] == Unvisited)] moveRight -> DoMoveRight();



DoMoveUp() =
	    { cost = cost + 1;
	    if (
	    	(xpos>0 && world[xpos+up][ypos] == Hostile) ||
	    	(xpos<7 && world[xpos+down][ypos] == Hostile) ||
	    	(ypos>0 && world[xpos][ypos+left] == Hostile) ||
	    	(ypos<7 && world[xpos][ypos+right] == Hostile)
	    	) {
	    	cost = cost + 4;
	    }
		world[xpos][ypos] = Visited;
		xpos = xpos + up;
	    } -> CheckCost();


DoMoveDown() =
	    { cost = cost + 1;
	    if (
	    	(xpos>0 && world[xpos+up][ypos] == Hostile) ||
	    	(xpos<7 && world[xpos+down][ypos] == Hostile) ||
	    	(ypos>0 && world[xpos][ypos+left] == Hostile) ||
	    	(ypos<7 && world[xpos][ypos+right] == Hostile)
	    	) {
	    	cost = cost + 4;
	    }
		world[xpos][ypos] = Visited;
		xpos = xpos + down;
	    } -> CheckCost();


DoMoveRight() =
	    { cost = cost + 1;
	    if (
	    	(xpos>0 && world[xpos+up][ypos] == Hostile) ||
	    	(xpos<7 && world[xpos+down][ypos] == Hostile) ||
	    	(ypos>0 && world[xpos][ypos+left] == Hostile) ||
	    	(ypos<7 && world[xpos][ypos+right] == Hostile)
	    	) {
	    	cost = cost + 4;
	    }
		world[xpos][ypos] = Visited;
		ypos = ypos + right;
	    } -> CheckCost();


DoMoveLeft() =
	    { cost = cost + 1;
		if (
			(xpos>0 && world[xpos+up][ypos] == Hostile) ||
			(xpos<7 && world[xpos+down][ypos] == Hostile) ||
			(ypos>0 && world[xpos][ypos+left] == Hostile) ||
			(ypos<7 && world[xpos][ypos+right] == Hostile)
			) {
			cost = cost + 4;
		}
		world[xpos][ypos] = Visited;
		ypos = ypos + left;
	    } -> CheckCost();
	
	
CheckCost() = 
		[xpos != SUB_HOME_X || ypos != SUB_HOME_Y] notHome -> GetY()
		[] [xpos == SUB_HOME_X && ypos == SUB_HOME_Y && cost <= max_cost] {max_cost = cost} -> GetY();

#define goal (xpos == SUB_HOME_X && ypos == SUB_HOME_Y && cost <= max_cost);
#assert GetY() reaches goal with min(cost);